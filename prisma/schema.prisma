generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Wallet {
  id String @id @default(cuid())
  balance Int @default(0)
  address String?
  publicKey String?
  type String @default("fiat")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  message     String
  read        Boolean         @default(false)
  link        String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdById String?
  user        User            @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  createdBy   User?           @relation("CreatedNotifications", fields: [createdById], references: [id])

  @@index([userId])
  @@index([createdById])
}

enum NotificationType {
  TRANSACTION_CREATED
  TRANSACTION_SUCCESSFUL
  TRANSACTION_FAILED
  WALLET_CREDITED
  WALLET_DEBITED
  NEW_LOGIN_DETECTED
  PASSWORD_CHANGED
  KYC_VERIFIED
  KYC_REJECTED
  ACCOUNT_VERIFICATION
  PRICE_ALERT
  SYSTEM_MESSAGE
  BROADCAST_MESSAGE
  BROADCAST_ALERT
  BROADCAST_UPDATE
}

enum USER_TYPE {
  SUPER_ADMIN
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  isVerified    Boolean   @default(false)
  image         String?
  wallets       Wallet[]
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  notifications Notification[] @relation("UserNotifications")
  type          USER_TYPE @default(USER)
  otp           VerificationToken?
  addresses     Address?
  createdNotifications Notification[] @relation("CreatedNotifications")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  password          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum TransactionMethod{
  BUY
  SELL
}
model Transaction{
  id String @id @default(cuid())
  isBuyOrSell TransactionMethod @default(BUY)
  fiatAmount Int
  fiatCurrency String
  cryptoCurrency String
  walletLink String
  walletAddress String
  network String
  status TransactionStatus @default(PENDING)
  paymentOptionId String?
  fiatAmountInUsd String?
  statusHistories Json?
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Address {
  id String @id @default(cuid())
  address String
  city String
  state String
  zip String
  country String
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  location     String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique

  @@unique([identifier, token])
}

model Config {
  id String @id @default(cuid())
  key String
  value String
  type SettingType
  updatedAt DateTime @updatedAt
  createdAt DateTime@default(now())
}

enum SettingType {
  STRING
  BOOLEAN
  NUMBER
  DATE
  JSON
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}