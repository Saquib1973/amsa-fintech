generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Wallet {
  id String @id @default(cuid())
  balance Int @default(0)
  address String?
  publicKey String?
  type String @default("fiat")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  isVerified    Boolean   @default(false)
  image         String?
  wallets       Wallet[]
  accounts      Account[]
  sessions      Session[]
  otp           VerificationToken?
  addresses     Address?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  password          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Address {
  id String @id @default(cuid())
  address String
  city String
  state String
  zip String
  country String
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  location     String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique

  @@unique([identifier, token])
}